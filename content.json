{"meta":{"title":"Tracegle","subtitle":"探索时间的迹线!","description":"hello!","author":"JachinChen","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2019-03-19T10:43:47.686Z","updated":"2019-03-19T10:43:47.686Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"@card{ 嘿，小老弟你怎么找到这里的！听说只有优秀的同学才能发现这儿呢！你可真棒 (／≧ω＼) 关于 我 叫JachinChen 是个好shǎ人bī 😂，目前是一条大一狗。真的咸鱼了一学期，并没什么优点，与特长，如果有的话:好吃懒做、死宅。 兴趣正在培养，可以一起养生跑跑步🏃，关于技术，真的什么都不会🌝，北冥有鱼，其名为咸.这句话真TM真实。淦。 不过我个人还算比较爱折腾，喜欢一些新奇的事物，喜欢数码，喜欢上B站。 [x] 北冥有鱼，其名为咸。 [x] 提升英语和编程能力！Fighting。 [x] 能看完3本书！ [x] 坚持运动！Continue Chat with me via : QQ：63039844 Twitter：@chen_jachin } [ tracgle.gif](https://i.loli.net/2019/03/19/5c90c7750d546.gif)"},{"title":"categories","date":"2019-02-12T13:23:34.000Z","updated":"2019-02-12T13:23:56.956Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-02-12T13:21:56.000Z","updated":"2019-02-14T04:44:25.339Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"Tracegle | 404","date":"2019-02-17T08:29:38.618Z","updated":"2019-02-17T08:29:38.618Z","comments":true,"path":"404/index.html","permalink":"http://yoursite.com/404/index.html","excerpt":"","text":""}],"posts":[{"title":"AndroidLearningNote","slug":"AndroidLearningNote","date":"2019-03-10T07:48:55.000Z","updated":"2019-03-18T13:07:08.021Z","comments":true,"path":"2019/03/10/AndroidLearningNote/","link":"","permalink":"http://yoursite.com/2019/03/10/AndroidLearningNote/","excerpt":"","text":"AndroidNote之UI布局基础 LinearLayout（线性布局） 1. android：orientation:设置布局管理器内组件的排列方式，可设置为 horizon （水平排列）、vertical （垂直排列）。 2. android：gravity 设置布局管理器内组件的对齐方式，该属性值可设为 top（顶部对齐） 、bottom（底部对齐） 、left（左对齐） 、right（右对齐） 、center_vertical（垂直方向居中） 、 fill_vertical（垂直方向填充） 、 center_horizontal（水平方向居中） 、 fill_horizontal（水平方向填充） 、center（垂直与水平方向都居中） 、 fill （填充） 、clip_vertical（垂直方向裁剪） 、 clip_horizontal（水平方向裁剪） 。可同时指定多种对其方式的组合，中间用“|”连接，如代码设置对齐方式为 left|center_vertical 表示出现在屏幕左边且垂直居中。有点像Flex布局； 3.match_parent,wrap_content, 其中fill_parent表示该组件的高度与父容器的高度相同；match_parent与wrap_content的作用完全相同 android2.2之后开始推荐使用wrap_content,该组件的高度恰好能包裹它的内容 **android:id 当前组件指定的一个id属性(这个通过findViewById（）方法获取)** layout_weight：控制各个组件在布局中的相对大小 首先声明只有在Linearlayout中，该属性才有效。（Google官方推荐，当使用weight属性时，将width设为0dip即可，效果跟设成wrap_content是一样的） layout_weight属性以控制各个控件在布局中的相对大小。layout_weight属性是一个非负整值 在水平布局的LinearLayout中有两个Button，这两个Button的layout_weight属性值都为1， 那么这两个按钮都会被拉伸到整个屏幕宽度的一半。如果layout_weight指为0，控件会按原大小显示，不会被拉伸； 对于其余layout_weight属性值大于0的控件，系统将会减去layout_weight属性值为0的控件的宽度或者高度， 再用剩余的宽度或高度按相应的比例来分配每一个控件显示的宽度或高度。 demo2.png RelativeLayout （相对布局） 第一类:属性值为true或false android:layout_centerHrizontal 水平居中 android:layout_centerVertical 垂直居中 android:layout_centerInparent 相对于父元素完全居中 android:layout_alignParentBottom 贴紧父元素的下边缘 android:layout_alignParentLeft 贴紧父元素的左边缘 android:layout_alignParentRight 贴紧父元素的右边缘 android:layout_alignParentTop 贴紧父元素的上边缘 android:layout_alignWithParentIfMissing 如果对应的兄弟元素找不到的话就以父元素做参照物 第二类：属性值必须为id的引用名“@id/id-name” android:layout_below 在某元素的下方 android:layout_above 在某元素的的上方 android:layout_toLeftOf 在某元素的左边 android:layout_toRightOf 在某元素的右边 android:layout_alignTop 本元素的上边缘和某元素的的上边缘对齐 android:layout_alignLeft 本元素的左边缘和某元素的的左边缘对齐 android:layout_alignBottom 本元素的下边缘和某元素的的下边缘对齐 android:layout_alignRight 本元素的右边缘和某元素的的右边缘对齐 第三类：属性值为具体的像素值，如30dip，40px android:layout_marginBottom 离某元素底边缘的距离 android:layout_marginLeft 离某元素左边缘的距离 android:layout_marginRight 离某元素右边缘的距离 android:layout_marginTop 离某元素上边缘的距离 android:gravity：这个是针对控件里的元素来说的，用来控制元素在该控件里的显示位置而android:layout_gravity：这个是针对控件本身而言，用来控制该控件在包含该控件的父控件中的位置 android:layout_gravity=“left” 能在相对和线性布局中 Android EditText android:hint=&quot;default information”设置默认显示在空间上的提示信息 android:numeric=”integer”设置只能输入整数，如果是小数则是：decimal android:password=”true” 这条可以让EditText显示的内容自动为星号，输入时内容会变成*字样。 android:password=”true” 设置只能输入密码 android:singleLine=”true” 强制输入的内容在单行 android:ellipsize=”end” 自动隐藏尾部溢出数据，一般用于文字内容过长一行无法全部显示时 demo2.png java知识 在重写父类的onCreate时，在方法前面加上@Override 系统可以帮你检查方法的正确性。 @Override public void onCreate(Bundle savedInstanceState) {…….} 文章引用CSDN:https://blog.csdn.net/qq_33210042/article/details/50916841 !1552913541371](C:\\Users\\JachinChen\\AppData\\Roaming\\Typora\\typora-user-images\\1552913541371.png)","categories":[{"name":"正常的文章","slug":"正常的文章","permalink":"http://yoursite.com/categories/正常的文章/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"记录第一个html静态页面","slug":"html-pratice","date":"2019-02-23T04:05:42.000Z","updated":"2019-03-17T14:53:52.663Z","comments":true,"path":"2019/02/23/html-pratice/","link":"","permalink":"http://yoursite.com/2019/02/23/html-pratice/","excerpt":"","text":"前言 利用闲暇时间抄的一段代码；也算是对html标签，css布局学习的一次实践demo。刚入门水平😵 项目地址：https://github.com/JuChunChen/304 首先感谢慕课@表严肃，表哥的免费入门教程；但是不知道为什么这个教程被删了；他的教程真的都是无水分，有着抛砖引玉地效果；由于首次实践跟着几十分钟地视频写下来也花了我好几个小时。真的太弱了😑 Demo预览.png 经验收集整理 选择器优先级 !important &gt; 行内样式 &gt; #id &gt; .class &gt; tag &gt; * &gt; 继承 &gt; 默认 选择器 从右往左 解析 居中方案 水平居中 行内元素: text-align: center 块级元素: margin: 0 auto absolute + transform flex + justify-content: center(flex布局) 垂直居中 line-height: height absolute + transform 内联元素position:absolute,top:0;left:0后会转为块状元素,且高宽为程序员设置的宽高；transform移动50% flex + align-items: center table 水平垂直居 absolute + transform flex + justify-content + align-items flex布局详解：http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html 去除浮动影响，防止父级高度塌陷 通过增加尾元素清除浮动 :after / &lt;br&gt; : clear: both 创建父级 BFC 父级设置高度 页面渲染时，dom 元素所采用的 布局模型。可通过box-sizing进行设置。根据计算宽高的区域可分为： content-box (W3C 标准盒模型)为box-sizeing默认值，(heigtht + border + padding)，故可能会被内容把盒子撑开。 border-box (IE 盒模型)border-box就是用元素内容和padding和border一起决定width和height，width和元素的内容以及padding和border相互制约 padding-box margin-box BFC (Block Fromatting Context) 块级格式化上下文，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。 IE下为 Layout，可通过 zoom:1 触发 BFC详解：https://www.cnblogs.com/libin-1/p/7098468.html 触发条件: 根元素 positon: absolute/fixed display: inline-block / table float 元素 ovevflow !== visible 规则: 属于同一个 BFC 的两个相邻 Box 垂直排列 属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠 BFC 中子元素不会超出他的包含块 BFC 的区域不会与 float 的元素区域重叠 计算 BFC 的高度时，浮动子元素也参与计算 文字层不会被浮动层覆盖，环绕于周围 应用: 阻止margin重叠 可以包含浮动元素 —— 清除内部浮动(清除浮动的原理是两个div都位于同一个 BFC 区域之中) 自适应两栏布局 可以阻止元素被浮动元素覆盖 响应式布局 应式布局之媒体查询器 @media only screen and (max-width:550px){ ​ .section-two .article-preview .text-zoom h2 { ​ font-size: 1em; ​ }//响应式调节字体 使用百分比代替像素进行布局设置 使用FLEX弹性布局方式设置百分比 使用rem单位布局可统一页面尺寸rem单位基于跟节点即body 用em单位布局可继承父素个性化布局，不使用px固定像素。 PC端的click，但在移动端中，连续click的触发有200ms ~ 300ms的延迟，可以通过使用fastclick.js解决（因为safari浏览器制定的判定click单机双击间隔时长判断），使用tap事件 touch事件（一般是200ms）突破300ms瓶颈 class可复调用双重属性 如在已定义的article页面可复加清除浮动溢出属性clea-fix :nth-child(odd)为奇数生效（even）为偶数生效，使用公式 (an + b)。描述：表示周期的长度，n 是计数器（从 0 开始），b 是偏移值。对第an+b个类生效。","categories":[{"name":"正常的文章","slug":"正常的文章","permalink":"http://yoursite.com/categories/正常的文章/"}],"tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"},{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"},{"name":"jquery","slug":"jquery","permalink":"http://yoursite.com/tags/jquery/"}]},{"title":"一小段51单片机的折腾之旅!","slug":"Learn51","date":"2019-02-20T13:59:55.000Z","updated":"2019-03-18T12:14:24.162Z","comments":true,"path":"2019/02/20/Learn51/","link":"","permalink":"http://yoursite.com/2019/02/20/Learn51/","excerpt":"","text":"前言 很有幸在寒假借了几天单片机玩玩，我拿到的是STC(宏晶公司)生产的89C52RC实验室开发板；STC89C52RC是一种低功耗、高性能CMOS8位MCU(微控制器),借了一个寒假，但是因为懒，真正也就玩了几天，看了下清翔的教程，唉，三分钟热度的毛病又犯了。😭但还是知道了很多以前压根不知道的知识。下面是我对那三五天的一点点知识总结。就学了一丢丢皮毛；以下内容为网络资料内容整理和自己的一些心得内容。 Learning notes 基础组成 一.单片机内部资源三大指标：** a.FLASH（程序存储控件） 相当于： 电脑硬盘（断点后还保存在） b.RAM（内存） 相当于： 电脑内存（存储一些） c.SFR（特殊功能寄存器） 二.单片机的最小系统 1.电源 主流单片机采用5V和3.3V的电压，供电电路40引脚接+5V，通常也成为VCC或VDD，代表电源正极；20引脚接GND,代表电源的负极，也是接地的意思。 2.晶振 晶体振荡器，作用是为单片机系统提供基准时钟信号，一直不停振荡，接有电容，作用是帮助晶体振荡，维持振荡信号的稳定。晶振被称为单片机的心脏，11.0592MHz代表晶振的频率，每一秒钟，晶振电路可以振动11.0592M次，由于不同单片机的晶振批频率的不同。所以相同的代码在不同单片机上就可能不能运行了；需要修改延时函数，匹配时序。 3.复位电路RST 接在单片机的9引脚RST复位引脚上，复位一般分为：上电复位，手动复位和程序自动复位。当程序运行时遭到干扰而死机可以按下复位键让程序重新初始化重新运行。 原理详解：https://blog.csdn.net/gjxman1314/article/details/54985385，想深入了解的朋友们可以去看看。 [ 51原理图.png](https://i.loli.net/2019/03/17/5c8e6359d05b1.png) 常用延时方法 非精确延时，精确延时 nop();(需要include&lt;intrins.h&gt;) 利用定时器进行定时 unsigned char:所占字节1.取值范围 0 - 255 unsigned int 所在字节2 取值范围0-65535 我们用uint8 uint16等来缩写来代替， typedef unisigned char uint8; typedef unsigned int uint16; 定时器/计数器中断 时钟周期：1/时钟源 1/11059200s（晶振） 机器周期：普通51一个机器周期是12个时钟周期 定时器是用来计时的，内部有一个寄存器，开始计时后，寄存器的值每经过一个机器周期就会自动加一，可以把机器周期理解为定时器的计数周期。16位的定时器，加到65535，再加1就算溢出，溢出后值变为0。 定时器的寄存器 [ 寄存器.png](https://i.loli.net/2019/03/18/5c8e7014698b8.png) 对TMOD赋值,配置工作模式；，以确定T0和T1的工作方式。 计算初值,并将其写入TH0、TL0或TH1、TL1。 中断方式时，则对EA赋值，开放定时器中断。 使TR0或TR1置位，启动定时/计数器定时或计数 判断TCON寄存器的TF0位，监测定时器溢出情况。 123456789void Timer0Init()&#123; TMOD|=0X01;//选择为定时器0模式，工作方式1，仅用TR0打开启动。 TH0=0XFC; //给定时器赋初值，定时1ms TL0=0X18; ET0=1;//打开定时器0中断允许 EA=1;//打开总中断 TR0=1;//打开定时器 &#125; [ 原理.png](https://i.loli.net/2019/03/18/5c8e70e24f31d.png) 称 描述 TF 定时器溢出标志。溢出时候，该位自动置1. TMOD M1M0：工作方式设置位。定时/计数器有四种工作方式。 TCON 用于控制其启动和中断申请。 C/T C/T ＝0为定时模式;C/T =1为计数模式。 TR 定时器运行控制位，置1开始计时，清0停止计时. GATE是门控位, GATE＝0时，用于控制定时器的启动是否受外部中断源信号的影响。只要用软件使TCON中的TR0或TR1为1，就可以启动定时/计数器工作；GATA＝1时，要用软件使TR0或TR1为1，同时外部中断引脚INT0/1也为高电平时，才能启动定时/计数器工作。即此时定时器的启动条件，加上了INT0/1引脚为高电平这一条件。 终端执行是硬件清0，或者软件清0. INT1引脚： M1,M0: 0x00 模式0 0x 01模式1 0x10模式2 0x11模式3 模式1:16位的计数器（TH1，TL1） 模式2：自动装载8位计数器。主要用在串口波特率发生器。精准信号脉冲 模式0和模式3几乎不用。 模式原理详解：https://blog.csdn.net/whalefall/article/details/79900817 TCON和TMOD复位后都会自动变为0x00 复位可以有自动复位和引脚复位 TMOD用于设置定时/计数器的工作方式，低四位用于T0，高四位用于T1 TCON的低4位用于控制外部中断,已在前面介绍。TCON的高4位用于控 制定时/计数器的启动和中断申请 sbit位声明 sfr 地址寄存器 sfr P0 = 0x80; // P0的地址 sfr TCON = 0x88; sbit ITO = TCON^0; // sbit是位声明 sbit LED = P0^0; 中断是指CPU在执行当前程序的过程中，由于某种随机出现的外设请求或CPU内部的异常事件,使CPU暂停正在执行的程序而转去 执行相应的服务处理程序；当服务处理程序运行完毕后，CPU再返回到暂停处继续执行原来的程序。 中断是独立于死循环程序的，，死循环碰到中断时停止。 接口初始化；寄存器初始化；死循环操作 用中断精准延时。在中断周期空隙处理数据，中断响应后输出 经验杂谈 5V就是高电频，0V就是低电平，数字电路，就是一个高一个低，这就是数字信号；PWM波，方波等波形信号的来源也是计算机控制电路的来源 高电平（正极）接VCC ，低电平（负极）接GND，这样就给单片机供电了。 电流对直流来说相当于断开的。 &lt;&lt; 左移 &gt;&gt;右移 0xf0 = 11110000 左移后：11100000 (最低位填0补充) 右移后:01111000 (最高位填0补充) 按位取反符号~： 取反后1变0,0变为1； 电容：储能，滤波，通交流隔直流，耦合，补偿，充放电 电容两端电压不能突变，在规定时间内电压未达设定，则可停止，作检测保护。电容充放电起延时作用 电感两端电流不能突变。 PWM波，占空比不同传的值也不同；转为数字信号 焊接，被焊物尽可能去氧化层及杂质。助焊剂； 电容标记105，代表该电容的容量，以三位数标注法，前两位是有效数字，第三位是位率（即为10的多少次方），单位为pF，105=10*10的5次方，105=1000000pF=1000nF=1μF。 Altium Designer PCB电路设计 先构建pcb库原件，按place可置放到原理图中 按shift可复制，按住x键拖动鼠标变成镜像原件，可用align对齐 心得体会 接触这东西之后才知道有嵌入式开发这东西；51虽然看起来小小的；其实用处还是很大的，要学的东西非常多；进阶的还要STM32;ARM架构等也是一门大学问。初次接触，我认为芯片手册和看资料是很重要的；单片机有很多引脚可以定义，都是通过设置特殊的寄存器地址来实现其各种功能的。像简单的跑马灯，数码管都是通过定义特殊寄存器地址实现的，但是即使简单刚接触还是很懵逼地，还有AD采集输出PWM波啥的也如此，是的，以上都只是一个纯小白的一次记录，排版也很乱，因为懒惰，很多都没有去实践过；比如串行通讯；蓝牙通讯；舵机控制等；也没折腾过淘宝的热门套件。以后有机会买一个开发板，树莓派啥的来深入学习一下。这东西我还是推荐要先系统性地看看视频或者书了解整体流程后在学，不然就和我一样乱玩乱学，后面寄存器看到脑壳疼就凉凉了。还有就是一定要多看看别人写的代码，厂家一般都会提供资料和源码例子，看完真的会受益匪浅。 文章摘要说明： https://blog.csdn.net/qq_22512533/article/details/46961545 https://blog.csdn.net/qq_38405680/article/details/81219722 https://blog.csdn.net/whalefall/article/details/79900817","categories":[{"name":"非正常的文章","slug":"非正常的文章","permalink":"http://yoursite.com/categories/非正常的文章/"}],"tags":[{"name":"单片机","slug":"单片机","permalink":"http://yoursite.com/tags/单片机/"}]},{"title":"如何使用Hexo+github Page搭建博客！","slug":"Build-Blog","date":"2019-02-18T00:31:25.000Z","updated":"2019-02-23T14:35:57.240Z","comments":true,"path":"2019/02/18/Build-Blog/","link":"","permalink":"http://yoursite.com/2019/02/18/Build-Blog/","excerpt":"","text":"前言 我认为写一个博客记录在学习过程遇到的问题或者表达个人见解，亦或是收集资料，是很有必要的。一开始我都是将一些学习总结放在有道云笔记里，确实大佬的产品是很好用，也支持markdown编辑，但渐渐接触了一些技术性的网站，如CSDN，GITHUB等，大佬太多了，里面也都是markdown编辑器；于是我也选择了markdown😬；所以选择了Hexo！ 为什么选择hexo 很久之前就知道有这个博客框架，一直没有去体验过(懒:😅)。而且，这个博客是不需要自己去购置服务器的，搭配github page服务甚至域名都不用去买。以前折腾过一个wordpress站点，然后也因为各种原因不了了之了。总体使用感觉简单易用，有很强大的后台；但也稍显臃肿。Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒之内，即可利用靓丽的主题生成静态网页。 搭建环境 git是一个版本控制管理工具，这个主要是在Hexo发布文章的时候起连接作用。将本地的博客同步到GitHub上面。Git 下载，并安装。 Node.js](http://nodejs.org/) 下载，并安装。如果网不好可以去国内的中文站 Node.js中文站 命令行(Git bash)输入以下命令查看当前版本若无错误则安装成功. 12node -vnpm -v 本地博客搭建 安装Hexo 通过‘npm’安装Hexo，在命令行(Git Bash)中输入: npm install -g hexo-cli 初始化网站 在你电脑的任意位置创建一个文件夹作为博客的目录，通过一下Hexo命令进行初始化 hexo init cd &lt;folder&gt; npm install 执行完成后你会发现文件加里会多处一下路径文件 123456789├── _config.yml├── package.json├── scaffolds| ├─ draft| └── page| └── post├── source | └── _posts└── themes Hexo相关命令均在站点目录下，使用Git Bash运行。 config.yml 博客的站点配置文件，博客的名称、关键词、作者、语言、博客主题…设置都在里面可以修改。路径\\themes&lt;主题文件夹&gt;_config.yml为主题配置文件 scaffolds Hexo的模板文件，内置了3个是新添加博客文章（posts）、新添加博客页（page）和新添加草稿（draft）的目标样式。 source source是放置我们博客内容的地方，里面初始只有两个文件夹，一个是drafts（草稿），一个posts（文章），但之后我们通过命令新建tags（标签）还有categories（分类）页后，这里会相继地增加文件夹。 themes 放置主题文件包的地方。Hexo会根据这个文件来生成静态页面。初始状态下只有landscape这个初始主题；后续可以上网找更多精美住主题。 Hexo命令操作 Hexo有详尽的中文文档，网址：https://hexo.io/zh-cn/docs/ hexo new &lt;layout&gt; &quot;title&quot; 新建文章或页面 hexo clean 清除掉已经生成的旧文件 hexo generate或hexo g 生成静态页面 hexo serve或hexo s 启动本地服务器浏览器访问http://localhost:4000/可本地预览生成的文件，本地没问题之后，Ctrl + C 停掉本地预览 执行 hexo s后浏览器访问网址查看本地效果： http://localhost:4000/ 701869-c7b8e928247c8667..png 至此，您的Hexo博客已经搭建在本地了😄,革命尚未成功，请君继续往下看。 远程部署GitHub [x] 首先你需要注册GitHub，这里就不演示了 创建仓库 新建一个仓库，项目名一定要是用户名.github.io的形式，会自动开启github Page服务，(README.md可选可不选) 比如，我的用户名是JuChunChen，则我的仓库名必须是JuChunChen.github.io我创建过了你们就自行创建。 3.png 配置SSH 创建SSH-Key，没有SSH-Key的话，git是不能将本地的代码部署到GitHub的。 在GitBash中执行 git config --global user.name &quot;yourself&quot; git config --global user.email yourself@example.com ssh-keygen -t rsa -C &quot;邮箱地址&quot; 添加到 github。 复制密钥文件内容（路径形如C:\\Users\\yourself\\.ssh\\id_rsa.pub），粘贴到New SSH Key即可。 4.png 同步代码 安装hexo deploy部署插件 npm install hexo-deployer-git --save 修改_config.yml用编辑器打开此文件，按照以下配置deploy信息. 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git branch: master 执行 hexo deploy 或 hexo d同步代码到GitHub上，然后你的仓库就会生成public里的文件。 等待1分钟左右，浏览器访问网址： https://&lt;Github账号名称&gt;.github.io你的网站就已经成功上线了😏 配置主题 本站主题为yscoder写的indigo，喜欢Material风的盆友😀可以直接装，当然也有更多主题可访问hexo官网。或者移步https://github.com/search?q=hexo-theme查看更多主题；若您是dalao也可以自己用框架写✍. 下载 git clone https://github.com/yscoder/hexo-theme-indigo .git themes/hexo-theme-indigo 激活 将_config.yml 里的 theme 字段内容改为 hexo-theme-indigo 。 本主题帮助文档:https://github.com/yscoder/hexo-theme-indigo/wiki 支持emoji表情😂😂😂 安装markdown-it-emoji插件 1npm install markdown-it-emoji --save 在hexo的配置文件_config.yml 下添加markdown-it配置代码： 123456789101112131415161718192021markdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: &apos;“”‘’&apos; plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup - markdown-it-emoji #用emoji插件 anchors: level: 2 collisionSuffix: &apos;v&apos; permalink: false permalinkClass: header-anchor permalinkSymbol: ¶ 这么简单的操作，当时博主折腾了好久😭 valine评论系统 使用方法请到他的官网查看，并结合下面的配置文件详细添加appID和appKey https://valine.js.org/ 添加关于页面 hexo new page about 在元文件source/about/index.md中添加 title: About layout: page 如果你看到这了；应该可以捣鼓折腾下来，一个Blog就这么建好了 你可以通过任意编辑器编辑md文件使用markdown写文章，然后通 过hexo来生成，部署。🤪 Typora 一款强大的markDown编辑器 markdown有许多好用的编辑器，但我正在使用的是Typora；个人使用体验还不错；可视化预览，边写边看很轻松；对初学者很友好😐 下载地址：https://www.typora.io/","categories":[{"name":"正常的文章","slug":"正常的文章","permalink":"http://yoursite.com/categories/正常的文章/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-02-17T00:31:25.000Z","updated":"2019-03-19T10:44:08.977Z","comments":true,"path":"2019/02/17/hello-world/","link":"","permalink":"http://yoursite.com/2019/02/17/hello-world/","excerpt":"","text":"Tracegle 迹线，记录时间的痕迹。👌 Hexo Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 正如上段所译，本博客采用的是hexo作为框架建设的。Hexo 是一个快速、简洁且高效的博客框架，使用MarkDown进行编辑文章，并可以生产静态网页。 为什么要建站 1嘿嘿，其实建一个站是我很久之前就想做的。以前有玩过WordPress和emlog,用虚拟主机搭了一两个月，发布一些资源，后面也都不了了之运营不下去了。WordPress和emlog，typecheo扩展性比较强，都是有后端动态发布的框架；运营修改和SEO都比较友好。但对于我做个人博客偶尔能写写文章，虽然不是技术宅，也谈不上写文章。就是记录记录时间吧，这也是我的博客名叫Tracegle(迹线)的原因；hexo就是为写文章生的框架；功能简单纯粹。我认为很适合我。 ​ 瞎扯了那么多，其实还是因为Hexo是本地部署生成的，配合Github Page服务就是免费呀。嘻嘻，用其他的运营得要服务器还得备案啥的都没接触过，其实有利有弊啦，暂时实力也不允许。🐶 这是本Blog第一篇文章！希望以后能越来越好。😄😄😄 [ tracegle.gif](https://i.loli.net/2019/03/19/5c90c7750d546.gif)","categories":[{"name":"非正常的文章","slug":"非正常的文章","permalink":"http://yoursite.com/categories/非正常的文章/"}],"tags":[{"name":"hello world","slug":"hello-world","permalink":"http://yoursite.com/tags/hello-world/"}]}]}