<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tracegle</title>
  
  <subtitle>探索时间的迹线!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-18T13:07:08.021Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JachinChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AndroidLearningNote</title>
    <link href="http://yoursite.com/2019/03/10/AndroidLearningNote/"/>
    <id>http://yoursite.com/2019/03/10/AndroidLearningNote/</id>
    <published>2019-03-10T07:48:55.000Z</published>
    <updated>2019-03-18T13:07:08.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="androidnote之ui布局基础">AndroidNote之UI布局基础</h2><h3 id="linearlayout-线性布局">LinearLayout（线性布局）</h3><p>1.　　android：orientation:设置布局管理器内组件的排列方式，可设置为 horizon （水平排列）、vertical （垂直排列）。<br>2.　　android：gravity 设置布局管理器内组件的对齐方式，该属性值可设为 top（顶部对齐） 、bottom（底部对齐） 、left（左对齐） 、right（右对齐） 、center_vertical（垂直方向居中） 、 fill_vertical（垂直方向填充） 、 center_horizontal（水平方向居中） 、 fill_horizontal（水平方向填充） 、center（垂直与水平方向都居中） 、 fill （填充） 、clip_vertical（垂直方向裁剪） 、  clip_horizontal（水平方向裁剪） 。可同时指定多种对其方式的组合，中间用“|”连接，如代码设置对齐方式为 <code>left|center_vertical</code> 表示出现在屏幕左边且垂直居中。有点像Flex布局；<br>3.match_parent,wrap_content, 其中fill_parent表示该组件的高度与父容器的高度相同；match_parent与wrap_content的作用完全相同 android2.2之后开始推荐使用wrap_content,该组件的高度恰好能包裹它的内容</p><blockquote><pre><code>**android:id 当前组件指定的一个id属性(这个通过findViewById（）方法获取)**</code></pre><p>layout_weight：控制各个组件在布局中的相对大小</p><p>首先声明只有在Linearlayout中，该属性才有效。（Google官方推荐，当使用weight属性时，将width设为0dip即可，效果跟设成wrap_content是一样的）</p><p>layout_weight属性以控制各个控件在布局中的相对大小。layout_weight属性是一个非负整值</p><p>在水平布局的LinearLayout中有两个Button，这两个Button的layout_weight属性值都为1，  那么这两个按钮都会被拉伸到整个屏幕宽度的一半。如果layout_weight指为0，控件会按原大小显示，不会被拉伸；  对于其余layout_weight属性值大于0的控件，系统将会减去layout_weight属性值为0的控件的宽度或者高度，  再用剩余的宽度或高度按相应的比例来分配每一个控件显示的宽度或高度。</p></blockquote><hr><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/18/5c8f975d03023.png" alt="demo2.png" title="">                </div>                <div class="image-caption">demo2.png</div>            </figure><h3 id="relativelayout-相对布局">RelativeLayout （相对布局）</h3><p>第一类:属性值为true或false<br>android:layout_centerHrizontal  水平居中<br>android:layout_centerVertical   垂直居中<br>android:layout_centerInparent    相对于父元素完全居中<br>android:layout_alignParentBottom 贴紧父元素的下边缘<br>android:layout_alignParentLeft   贴紧父元素的左边缘<br>android:layout_alignParentRight  贴紧父元素的右边缘<br>android:layout_alignParentTop    贴紧父元素的上边缘<br>android:layout_alignWithParentIfMissing  如果对应的兄弟元素找不到的话就以父元素做参照物</p><p>第二类：属性值必须为id的引用名“@id/id-name”<br>android:layout_below      在某元素的下方<br>android:layout_above      在某元素的的上方<br>android:layout_toLeftOf   在某元素的左边<br>android:layout_toRightOf  在某元素的右边</p><p>android:layout_alignTop   本元素的上边缘和某元素的的上边缘对齐   android:layout_alignLeft  本元素的左边缘和某元素的的左边缘对齐<br>android:layout_alignBottom 本元素的下边缘和某元素的的下边缘对齐<br>android:layout_alignRight  本元素的右边缘和某元素的的右边缘对齐</p><p>第三类：属性值为具体的像素值，如30dip，40px</p><p>android:layout_marginBottom             离某元素底边缘的距离<br>android:layout_marginLeft                  离某元素左边缘的距离<br>android:layout_marginRight                离某元素右边缘的距离<br>android:layout_marginTop                  离某元素上边缘的距离</p><p><strong>android:gravity：这个是针对控件里的元素来说的，用来控制元素在该控件里的显示位置而android:layout_gravity：这个是针对控件本身而言，用来控制该控件在包含该控件的父控件中的位置 android:layout_gravity=“left” 能在相对和线性布局中</strong></p><h3 id="android-edittext"><strong>Android EditText</strong></h3><p>android:hint=&quot;default information”设置默认显示在空间上的提示信息</p><p>android:numeric=”integer”设置只能输入整数，如果是小数则是：decimal</p><p>android:password=”true” 这条可以让EditText显示的内容自动为星号，输入时内容会变成*字样。</p><p>android:password=”true” 设置只能输入密码</p><p>android:singleLine=”true” 强制输入的内容在单行</p><p>android:ellipsize=”end” 自动隐藏尾部溢出数据，一般用于文字内容过长一行无法全部显示时</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/18/5c8f975dc2e8d.png" alt="demo2.png" title="">                </div>                <div class="image-caption">demo2.png</div>            </figure><h2 id="java知识">java知识</h2><p>在重写父类的onCreate时，在方法前面加上@Override 系统可以帮你检查方法的正确性。<br>@Override<br>public void onCreate(Bundle savedInstanceState)</p><p>{…….}</p><blockquote><p>文章引用CSDN:<a href="https://blog.csdn.net/qq_33210042/article/details/50916841" target="_blank" rel="noopener">https://blog.csdn.net/qq_33210042/article/details/50916841</a></p></blockquote><p>!1552913541371](C:\Users\JachinChen\AppData\Roaming\Typora\typora-user-images\1552913541371.png)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;androidnote之ui布局基础&quot;&gt;AndroidNote之UI布局基础&lt;/h2&gt;
&lt;h3 id=&quot;linearlayout-线性布局&quot;&gt;LinearLayout（线性布局）&lt;/h3&gt;
&lt;p&gt;1.　　android：orientation:设置布局管理器内组件
      
    
    </summary>
    
      <category term="正常的文章" scheme="http://yoursite.com/categories/%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>记录第一个html静态页面</title>
    <link href="http://yoursite.com/2019/02/23/html-pratice/"/>
    <id>http://yoursite.com/2019/02/23/html-pratice/</id>
    <published>2019-02-23T04:05:42.000Z</published>
    <updated>2019-03-17T14:53:52.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote><p>利用闲暇时间抄的一段代码；也算是对html标签，css布局学习的一次实践demo。刚入门水平😵</p></blockquote><p>项目地址：<a href="https://github.com/JuChunChen/304" target="_blank" rel="noopener">https://github.com/JuChunChen/304</a></p><p>首先感谢慕课@表严肃，表哥的免费入门教程；但是不知道为什么这个教程被删了；他的教程真的都是无水分，有着抛砖引玉地效果；由于首次实践跟着几十分钟地视频写下来也花了我好几个小时。真的太弱了😑</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/02/23/5c70c9320aba5.png" alt="Demo预览.png" title="">                </div>                <div class="image-caption">Demo预览.png</div>            </figure><h2 id="经验收集整理">经验收集整理</h2><h3 id="选择器优先级">选择器优先级</h3><ul><li><code>!important</code> &gt; 行内样式 &gt; <code>#id</code> &gt; <code>.class</code> &gt; <code>tag</code> &gt; * &gt; 继承 &gt; 默认</li><li>选择器 <strong>从右往左</strong> 解析</li></ul><h3 id="居中方案">居中方案</h3><ol><li>水平居中</li></ol><ul><li>行内元素: <code>text-align: center</code></li><li>块级元素: <code>margin: 0 auto</code></li><li><code>absolute + transform</code></li><li><code>flex + justify-content: center</code>(flex布局)</li></ul><ol start="2"><li>垂直居中</li></ol><ul><li><code>line-height: height</code></li><li><code>absolute + transform</code>  内联元素position:absolute,top:0;left:0后会转为块状元素,且高宽为程序员设置的宽高；transform移动50%</li><li><code>flex + align-items: center</code></li><li><code>table</code></li></ul><ol start="3"><li>水平垂直居</li></ol><ul><li><p><code>absolute + transform</code></p></li><li><p><code>flex + justify-content + align-items</code></p><blockquote><p>flex布局详解：<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p></blockquote></li></ul><h3 id="去除浮动影响-防止父级高度塌陷">去除浮动影响，防止父级高度塌陷</h3><ul><li>通过增加尾元素清除浮动<ul><li><code>:after / &lt;br&gt; : clear: both</code></li><li>创建父级 BFC</li><li>父级设置高度</li></ul></li></ul><p>页面渲染时，dom 元素所采用的 <strong>布局模型</strong>。可通过<code>box-sizing</code>进行设置。根据计算宽高的区域可分为：</p><ul><li><code>content-box</code> (W3C 标准盒模型)为box-sizeing默认值，(heigtht + border + padding)，故可能会被内容把盒子撑开。</li><li><code>border-box</code> (IE 盒模型)border-box就是用<strong>元素内容和padding和border一起决定width和height</strong>，width和元素的内容以及padding和border相互制约</li><li><code>padding-box</code></li><li><code>margin-box</code></li></ul><h3 id="bfc-block-fromatting-context">BFC (Block Fromatting Context)</h3><p><strong>块级格式化上下文</strong>，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。</p><blockquote><p>IE下为 Layout，可通过 zoom:1 触发</p><p>BFC详解：<a href="https://www.cnblogs.com/libin-1/p/7098468.html" target="_blank" rel="noopener">https://www.cnblogs.com/libin-1/p/7098468.html</a></p></blockquote><ul><li>触发条件:<ul><li>根元素</li><li><code>positon: absolute/fixed</code></li><li><code>display: inline-block / table</code></li><li><code>float</code> 元素</li><li><code>ovevflow</code> !== <code>visible</code></li></ul></li><li>规则:<ul><li>属于同一个 BFC 的两个相邻 Box 垂直排列</li><li>属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li><li>BFC 中子元素不会超出他的包含块</li><li>BFC 的区域不会与 float 的元素区域重叠</li><li>计算 BFC 的高度时，浮动子元素也参与计算</li><li>文字层不会被浮动层覆盖，环绕于周围</li></ul></li><li>应用:<ul><li>阻止<code>margin</code>重叠</li><li>可以包含浮动元素 —— 清除内部浮动(清除浮动的原理是两个<code>div</code>都位于同一个 BFC 区域之中)</li><li>自适应两栏布局</li><li>可以阻止元素被浮动元素覆盖</li></ul></li></ul><h3 id="响应式布局">响应式布局</h3><p><strong>应式布局之媒体查询器</strong></p><p>@media only screen and (max-width:550px){</p><p>​.section-two .article-preview .text-zoom h2 {</p><p>​font-size: 1em;</p><p>​}//响应式调节字体</p><p><strong>使用百分比代替像素进行布局设置</strong></p><p><strong>使用FLEX弹性布局方式设置百分比</strong></p><p>使用<code>rem</code>单位布局可统一页面尺寸rem单位基于跟节点即body 用<code>em</code>单位布局可继承父素个性化布局，不使用px固定像素。</p><p>PC端的click，但在移动端中，连续click的触发有200ms ~ 300ms的延迟，可以通过使用<strong>fastclick.js</strong>解决（因为safari浏览器制定的判定click单机双击间隔时长判断），使用tap事件 touch事件（一般是200ms）突破300ms瓶颈</p><p>class可复调用双重属性 如在已定义的article页面可复加清除浮动溢出属性clea-fix</p><div class="article-preview clear-fix"><p>:nth-child(odd)为奇数生效（even）为偶数生效，使用公式 (an + b)。描述：表示周期的长度，n 是计数器（从 0 开始），b 是偏移值。对第an+b个类生效。</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;利用闲暇时间抄的一段代码；也算是对html标签，css布局学习的一次实践demo。刚入门水平😵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/J
      
    
    </summary>
    
      <category term="正常的文章" scheme="http://yoursite.com/categories/%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>一小段51单片机的折腾之旅!</title>
    <link href="http://yoursite.com/2019/02/20/Learn51/"/>
    <id>http://yoursite.com/2019/02/20/Learn51/</id>
    <published>2019-02-20T13:59:55.000Z</published>
    <updated>2019-03-18T12:14:24.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>很有幸在寒假借了几天单片机玩玩，我拿到的是STC(<a href="http://www.stcmcu.com/" target="_blank" rel="noopener">宏晶公司</a>)生产的89C52RC实验室开发板；STC89C52RC是一种低功耗、高性能CMOS8位MCU(微控制器),借了一个寒假，但是因为懒，真正也就玩了几天，看了下清翔的教程，唉，三分钟热度的毛病又犯了。😭但还是知道了很多以前压根不知道的知识。下面是我对那三五天的一点点知识总结。就学了一丢丢皮毛；以下内容为网络资料内容整理和自己的一些心得内容。</p><h2 id="learning-notes">Learning notes</h2><hr><h3 id="基础组成">基础组成</h3><p>一.单片机内部资源三大指标：**</p><p>a.FLASH（程序存储控件<rom>） 相当于： 电脑硬盘（断点后还保存在）</rom></p><p>b.RAM（内存） 相当于： 电脑内存（存储一些）</p><p>c.SFR（特殊功能寄存器）</p><p><strong>二.单片机的最小系统</strong><br>1.电源<br>主流单片机采用5V和3.3V的电压，供电电路40引脚接+5V，通常也成为VCC或VDD，代表电源正极；20引脚接GND,代表电源的负极，也是接地的意思。<br>2.晶振<br>晶体振荡器，作用是为单片机系统提供基准时钟信号，一直不停振荡，接有电容，作用是帮助晶体振荡，维持振荡信号的稳定。晶振被称为<strong>单片机的心脏</strong>，11.0592MHz代表晶振的频率，每一秒钟，晶振电路可以振动11.0592M次，由于不同单片机的晶振批频率的不同。所以相同的代码在不同单片机上就可能不能运行了；需要<strong>修改延时函数，匹配时序</strong>。<br>3.复位电路RST<br>接在单片机的9引脚RST复位引脚上，复位一般分为：上电复位，手动复位和程序自动复位。当程序运行时遭到干扰而死机可以按下复位键让程序重新初始化重新运行。</p><blockquote><p>原理详解：<a href="https://blog.csdn.net/gjxman1314/article/details/54985385%EF%BC%8C%E6%83%B3%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC%E5%8F%AF%E4%BB%A5%E5%8E%BB%E7%9C%8B%E7%9C%8B%E3%80%82" target="_blank" rel="noopener">https://blog.csdn.net/gjxman1314/article/details/54985385，想深入了解的朋友们可以去看看。</a></p></blockquote><p><img src="https://i.loli.net/2019/03/17/5c8e555ae6213.jpg" alt="STC89C62RC.jpg"></p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/17/5c8e6359d05b1.png" alt="51原理图.png](https://i.loli.net/2019/03/17/5c8e6359d05b1.png)" title="">                </div>                <div class="image-caption">51原理图.png](https://i.loli.net/2019/03/17/5c8e6359d05b1.png)</div>            </figure></p><h3 id="常用延时方法">常用延时方法</h3><p>非精确延时，精确延时</p><p><em>nop</em>();(需要include&lt;intrins.h&gt;)</p><p>利用定时器进行定时</p><p>unsigned char:所占字节1.取值范围 0 - 255</p><p>unsigned int 所在字节2 取值范围0-65535</p><p>我们用uint8 uint16等来缩写来代替，</p><p>typedef unisigned char uint8;</p><p>typedef unsigned int uint16;</p><h3 id="定时器-计数器中断">定时器/计数器中断</h3><p><a href="https://www.baidu.com/s?wd=%E6%97%B6%E9%92%9F%E5%91%A8%E6%9C%9F&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">时钟周期</a>：1/时钟源   1/11059200s（晶振）</p><p>机器周期：普通51一个机器周期是12个时钟周期</p><ul><li>定时器是用来计时的，内部有一个寄存器，开始计时后，寄存器的值每经过一个机器周期就会自动加一，可以把机器周期理解为定时器的计数周期。16位的定时器，加到65535，再加1就算溢出，溢出后值变为0。</li></ul><p><strong>定时器的寄存器</strong></p><p><img src="https://i.loli.net/2019/03/18/5c8f300ae4015.png" alt="TMOD.png"></p><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/18/5c8e7014698b8.png" alt="寄存器.png](https://i.loli.net/2019/03/18/5c8e7014698b8.png)" title="">                </div>                <div class="image-caption">寄存器.png](https://i.loli.net/2019/03/18/5c8e7014698b8.png)</div>            </figure></p><ol start="2"><li><ol><li>对TMOD赋值,配置工作模式；，以确定T0和T1的工作方式。</li></ol></li><li>计算初值,并将其写入TH0、TL0或TH1、TL1。</li><li>中断方式时，则对EA赋值，开放定时器中断。</li><li>使TR0或TR1置位，启动定时/计数器定时或计数</li><li>判断TCON寄存器的TF0位，监测定时器溢出情况。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void Timer0Init()</span><br><span class="line">&#123;</span><br><span class="line">TMOD|=0X01;//选择为定时器0模式，工作方式1，仅用TR0打开启动。</span><br><span class="line">TH0=0XFC;//给定时器赋初值，定时1ms</span><br><span class="line">TL0=0X18;</span><br><span class="line">ET0=1;//打开定时器0中断允许</span><br><span class="line">EA=1;//打开总中断</span><br><span class="line">TR0=1;//打开定时器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/18/5c8e70e24f31d.png" alt="原理.png](https://i.loli.net/2019/03/18/5c8e70e24f31d.png)" title="">                </div>                <div class="image-caption">原理.png](https://i.loli.net/2019/03/18/5c8e70e24f31d.png)</div>            </figure></p><table><thead><tr><th>称</th><th>描述</th></tr></thead><tbody><tr><td>TF</td><td>定时器溢出标志。溢出时候，该位自动置1.</td></tr><tr><td>TMOD</td><td>M1M0：工作方式设置位。定时/计数器有四种工作方式。</td></tr><tr><td>TCON</td><td>用于控制其启动和中断申请。</td></tr><tr><td>C/T</td><td>C/T ＝0为定时模式;C/T =1为计数模式。</td></tr><tr><td>TR</td><td>定时器运行控制位，置1开始计时，清0停止计时.</td></tr></tbody></table><p><strong>GATE是门控位, GATE＝0时，用于控制定时器的启动是否受外部中断源信号的影响。只要用软件使TCON中的TR0或TR1为1，就可以启动定时/计数器工作；GATA＝1时，要用软件使TR0或TR1为1，同时外部中断引脚INT0/1也为高电平时，才能启动定时/计数器工作。即此时定时器的启动条件，加上了INT0/1引脚为高电平这一条件。</strong></p><p>终端执行是硬件清0，或者软件清0.</p><p>INT1引脚：</p><blockquote><p>M1,M0:<br>0x00 模式0 0x 01模式1  0x10模式2   0x11模式3<br>模式1:16位的计数器（TH1，TL1）<br>模式2：自动装载8位计数器。主要用在串口波特率发生器。精准信号脉冲<br>模式0和模式3几乎不用。</p><p>模式原理详解：<a href="https://blog.csdn.net/whalefall/article/details/79900817" target="_blank" rel="noopener">https://blog.csdn.net/whalefall/article/details/79900817</a></p></blockquote><p>TCON和TMOD复位后都会自动变为0x00  复位可以有自动复位和引脚复位</p><p>TMOD用于设置定时/计数器的工作方式，低四位用于T0，高四位用于T1</p><p>TCON的低4位用于控制外部中断,已在前面介绍。TCON的高4位用于控</p><p>制定时/计数器的启动和中断申请</p><p>sbit位声明 sfr 地址寄存器</p><p>sfr P0      = 0x80;  // P0的地址</p><p>sfr TCON  = 0x88;</p><p>sbit ITO    = TCON^0;   // sbit是位声明</p><p>sbit LED   = P0^0;</p><p>中断是指<a href="https://www.baidu.com/s?wd=CPU&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">CPU</a>在执行当前程序的过程中，由于某种随机出现的外设请求或CPU内部的异常事件,使CPU暂停正在执行的程序而转去 执行相应的服务处理程序；当服务处理程序运行完毕后，CPU再返回到暂停处继续执行原来的程序。</p><p><strong>中断是独立于死循环程序的，，死循环碰到中断时停止。</strong></p><p>接口初始化；寄存器初始化；死循环操作</p><p>用中断精准延时。在中断周期空隙处理数据，中断响应后输出</p><h3 id="经验杂谈">经验杂谈</h3><p><strong>5V就是高电频，0V就是低电平，数字电路，就是一个高一个低</strong>，这就是数字信号；PWM波，方波等波形信号的来源也是计算机控制电路的来源</p><p>高电平（正极）接VCC  ，低电平（负极）接GND，这样就给单片机供电了。</p><p>电流对直流来说相当于断开的。</p><p>&lt;&lt; 左移      &gt;&gt;右移</p><p>0xf0 = 11110000  左移后：11100000 (最低位填0补充)</p><p>右移后:01111000 (最高位填0补充)</p><p><strong>按位取反符号~：</strong></p><p>取反后1变0,0变为1；</p><p>电容：储能，滤波，通交流隔直流，耦合，补偿，充放电</p><p>电容两端电压不能突变，在规定时间内电压未达设定，则可停止，作检测保护。电容充放电起延时作用</p><p>电感两端电流不能突变。</p><p>PWM波，占空比不同传的值也不同；转为数字信号</p><p>焊接，被焊物尽可能去氧化层及杂质。助焊剂；</p><p>电容标记105，代表该电容的容量，以三位数标注法，前两位是有效数字，第三位是位率（即为10的多少次方），单位为pF，105=10*10的5次方，105=1000000pF=1000nF=1μF。</p><p>Altium Designer PCB电路设计</p><p>先构建pcb库原件，按place可置放到原理图中 按shift可复制，按住x键拖动鼠标变成镜像原件，可用align对齐</p><h3 id="心得体会">心得体会</h3><blockquote><p>接触这东西之后才知道有嵌入式开发这东西；51虽然看起来小小的；其实用处还是很大的，要学的东西非常多；进阶的还要STM32;ARM架构等也是一门大学问。初次接触，我认为芯片手册和看资料是很重要的；单片机有很多引脚可以定义，都是通过设置特殊的寄存器地址来实现其各种功能的。像简单的跑马灯，数码管都是通过定义特殊寄存器地址实现的，但是即使简单刚接触还是很懵逼地，还有AD采集输出PWM波啥的也如此，是的，以上都只是一个纯小白的一次记录，排版也很乱，因为懒惰，很多都没有去实践过；比如串行通讯；蓝牙通讯；舵机控制等；也没折腾过淘宝的热门套件。以后有机会买一个开发板，树莓派啥的来深入学习一下。这东西我还是推荐要先系统性地看看视频或者书了解整体流程后在学，不然就和我一样乱玩乱学，后面寄存器看到脑壳疼就凉凉了。还有就是一定要多看看别人写的代码，厂家一般都会提供资料和源码例子，看完真的会受益匪浅。</p></blockquote><blockquote><p>文章摘要说明：</p><p><a href="https://blog.csdn.net/qq_22512533/article/details/46961545" target="_blank" rel="noopener">https://blog.csdn.net/qq_22512533/article/details/46961545</a></p><p><a href="https://blog.csdn.net/qq_38405680/article/details/81219722" target="_blank" rel="noopener">https://blog.csdn.net/qq_38405680/article/details/81219722</a></p><p><a href="https://blog.csdn.net/whalefall/article/details/79900817" target="_blank" rel="noopener">https://blog.csdn.net/whalefall/article/details/79900817</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;很有幸在寒假借了几天单片机玩玩，我拿到的是STC(&lt;a href=&quot;http://www.stcmcu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;宏晶公司&lt;/a&gt;)生产的89C52RC实验室开发板；ST
      
    
    </summary>
    
      <category term="非正常的文章" scheme="http://yoursite.com/categories/%E9%9D%9E%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="单片机" scheme="http://yoursite.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>如何使用Hexo+github Page搭建博客！</title>
    <link href="http://yoursite.com/2019/02/18/Build-Blog/"/>
    <id>http://yoursite.com/2019/02/18/Build-Blog/</id>
    <published>2019-02-18T00:31:25.000Z</published>
    <updated>2019-02-23T14:35:57.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>我认为写一个博客记录在学习过程遇到的问题或者表达个人见解，亦或是收集资料，是很有必要的。一开始我都是将一些学习总结放在有道云笔记里，确实大佬的产品是很好用，也支持markdown编辑，但渐渐接触了一些技术性的网站，如CSDN，GITHUB等，大佬太多了，里面也都是markdown编辑器；于是我也选择了markdown😬；所以选择了Hexo！</p><h2 id="为什么选择hexo">为什么选择hexo</h2><p>很久之前就知道有这个博客框架，一直没有去体验过(懒:😅)。而且，这个博客是不需要自己去购置服务器的，搭配github page服务甚至域名都不用去买。以前折腾过一个wordpress站点，然后也因为各种原因不了了之了。总体使用感觉简单易用，有很强大的后台；但也稍显臃肿。<code>Hexo</code>是一个快速、简洁且高效的博客框架。<code>Hexo</code>使用Markdown（或其他渲染引擎）解析文章，在几秒之内，即可利用靓丽的主题生成静态网页。</p><h2 id="搭建环境">搭建环境</h2><ol><li>git是一个版本控制管理工具，这个主要是在Hexo发布文章的时候起连接作用。将本地的博客同步到GitHub上面。<a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a> 下载，并安装。</li><li>Node.js](<a href="http://nodejs.org/" target="_blank" rel="noopener">http://nodejs.org/</a>) 下载，并安装。如果网不好可以去国内的中文站 <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js中文站</a></li></ol><blockquote><p>命令行(Git bash)输入以下命令查看当前版本若无错误则安装成功.</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/02/18/5c6a24b1e9e37.png" alt="1212.png"></p><h2 id="本地博客搭建">本地博客搭建</h2><h3 id="安装hexo">安装Hexo</h3><p>通过‘npm’安装Hexo，在命令行(Git Bash)中输入:</p><p><code>npm install -g hexo-cli</code></p><h3 id="初始化网站">初始化网站</h3><p>在你电脑的任意位置创建一个文件夹作为博客的目录，通过一下Hexo命令进行初始化</p><p><code>hexo init</code><br><code>cd &lt;folder&gt;</code><br><code>npm install</code></p><p>执行完成后你会发现文件加里会多处一下路径文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">|├─ draft</span><br><span class="line">|└── page</span><br><span class="line">|└── post</span><br><span class="line">├── source   </span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><blockquote><p>Hexo相关命令均在<strong>站点目录</strong>下，使用<strong>Git Bash</strong>运行。</p><p><code>config.yml</code><br>博客的站点配置文件，博客的名称、关键词、作者、语言、博客主题…设置都在里面可以修改。路径<folder>\themes&lt;主题文件夹&gt;_config.yml为主题配置文件</folder></p><p><code>scaffolds</code><br>Hexo的模板文件，内置了3个是新添加博客文章（posts）、新添加博客页（page）和新添加草稿（draft）的目标样式。<br><code>source</code><br>source是放置我们博客内容的地方，里面初始只有两个文件夹，一个是drafts（草稿），一个posts（文章），但之后我们通过命令新建tags（标签）还有categories（分类）页后，这里会相继地增加文件夹。<br><code>themes</code><br>放置主题文件包的地方。Hexo会根据这个文件来生成静态页面。初始状态下只有landscape这个初始主题；后续可以上网找更多精美住主题。</p></blockquote><h3 id="hexo命令操作">Hexo命令操作</h3><blockquote><p>Hexo有详尽的中文文档，网址：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p></blockquote><ul><li><code>hexo new &lt;layout&gt; &quot;title&quot;</code>  新建文章或页面</li><li><code>hexo clean</code>  清除掉已经生成的旧文件</li><li><code>hexo generate</code>或<code>hexo g</code> 生成静态页面</li><li><code>hexo serve</code>或<code>hexo s</code>  启动本地服务器浏览器访问<code>http://localhost:4000/</code>可本地预览生成的文件，本地没问题之后，<strong>Ctrl + C</strong> 停掉本地预览</li></ul><p>执行 <code>hexo s</code>后浏览器访问网址查看本地效果： <code>http://localhost:4000/</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/02/18/5c6a31187a72e.png" alt="701869-c7b8e928247c8667..png" title="">                </div>                <div class="image-caption">701869-c7b8e928247c8667..png</div>            </figure><blockquote><p>至此，您的Hexo博客已经搭建在本地了😄,革命尚未成功，请君继续往下看。</p></blockquote><h2 id="远程部署github">远程部署GitHub</h2><ul><li>[x] 首先你需要注册<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>，这里就不演示了</li></ul><h3 id="创建仓库">创建仓库</h3><p>新建一个仓库，项目名一定要是用户名.github.io的形式，会自动开启github Page服务，(README.md可选可不选)<br>比如，我的用户名是JuChunChen，则我的仓库名必须是<code>JuChunChen.github.io</code>我创建过了你们就自行创建。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/02/18/5c6a355e03094.png" alt="3.png" title="">                </div>                <div class="image-caption">3.png</div>            </figure><h3 id="配置ssh">配置SSH</h3><blockquote><p>创建SSH-Key，没有SSH-Key的话，git是不能将本地的代码部署到GitHub的。</p></blockquote><p>在GitBash中执行</p><p><code>git config --global user.name &quot;yourself&quot;</code></p><p><code>git config --global user.email yourself@example.com</code></p><p><code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code></p><p><img src="https://i.loli.net/2019/02/18/5c6a38c8dfbe9.png" alt=""></p><ul><li>添加到 github。 复制密钥文件内容（路径形如<code>C:\Users\yourself\.ssh\id_rsa.pub</code>），粘贴到<a href="https://github.com/settings/keys" target="_blank" rel="noopener">New SSH Key</a>即可。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/02/18/5c6a383e03c3e.png" alt="4.png" title="">                </div>                <div class="image-caption">4.png</div>            </figure><h3 id="同步代码">同步代码</h3><blockquote><p>安装hexo deploy部署插件</p></blockquote><p><code>npm install hexo-deployer-git --save</code></p><ul><li>修改<code>_config.yml</code>用编辑器打开此文件，按照以下配置deploy信息.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>执行 <code>hexo deploy</code> 或 <code>hexo d</code>同步代码到GitHub上，然后你的仓库就会生成public里的文件。</li></ul><p><img src="https://i.loli.net/2019/02/18/5c6a713252c61.png" alt="2.png"></p><blockquote><p>等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code>你的网站就已经成功上线了😏</p></blockquote><h2 id="配置主题">配置主题</h2><p>本站主题为yscoder写的<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a>，喜欢Material风的盆友😀可以直接装，当然也有更多主题可访问hexo官网。或者移步<a href="https://github.com/search?q=hexo-theme" target="_blank" rel="noopener">https://github.com/search?q=hexo-theme</a>查看更多主题；若您是dalao也可以自己用框架写✍.</p><h3 id="下载">下载</h3><p><code>git clone https://github.com/yscoder/hexo-theme-indigo .git themes/hexo-theme-indigo</code></p><h3 id="激活">激活</h3><p>将<code>_config.yml</code> 里的 <code>theme</code> 字段内容改为 <code>hexo-theme-indigo</code> 。</p><p>本主题帮助文档:<a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="noopener">https://github.com/yscoder/hexo-theme-indigo/wiki</a></p><hr><h3 id="支持emoji表情😂😂😂">支持emoji表情😂😂😂</h3><ul><li>安装<strong>markdown-it-emoji</strong>插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure><ul><li>在hexo的配置文件<code>_config.yml</code> 下添加markdown-it配置代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    html: true</span><br><span class="line">    xhtmlOut: false</span><br><span class="line">    breaks: true</span><br><span class="line">    linkify: true</span><br><span class="line">    typographer: true</span><br><span class="line">    quotes: &apos;“”‘’&apos;</span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-ins</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">    - markdown-it-emoji  #用emoji插件</span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: &apos;v&apos;</span><br><span class="line">    permalink: false</span><br><span class="line">    permalinkClass: header-anchor</span><br><span class="line">    permalinkSymbol: ¶</span><br></pre></td></tr></table></figure><blockquote><p>这么简单的操作，当时博主折腾了好久😭</p></blockquote><hr><h3 id="valine评论系统">valine评论系统</h3><p>使用方法请到他的官网查看，并结合下面的配置文件详细添加appID和appKey<br><a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a></p><h3 id="添加关于页面">添加关于页面</h3><p><code>hexo new page about</code></p><p>在元文件source/about/index.md中添加<br><code>title: About</code><br><code>layout: page</code></p><blockquote><p>如果你看到这了；应该可以捣鼓折腾下来，一个Blog就这么建好了</p><p>你可以通过任意编辑器编辑md文件使用markdown写文章，然后通</p><p>过hexo来生成，部署。🤪</p></blockquote><h2 id="typora-一款强大的markdown编辑器">Typora 一款强大的markDown编辑器</h2><p>markdown有许多好用的编辑器，但我正在使用的是Typora；个人使用体验还不错；可视化预览，边写边看很轻松；对初学者很友好😐</p><blockquote><p>下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;我认为写一个博客记录在学习过程遇到的问题或者表达个人见解，亦或是收集资料，是很有必要的。一开始我都是将一些学习总结放在有道云笔记里，确实大佬的产品是很好用，也支持markdown编辑，但渐渐接触了一些技术性的网站，如CSDN，GITH
      
    
    </summary>
    
      <category term="正常的文章" scheme="http://yoursite.com/categories/%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/02/17/hello-world/"/>
    <id>http://yoursite.com/2019/02/17/hello-world/</id>
    <published>2019-02-17T00:31:25.000Z</published>
    <updated>2019-03-19T10:49:18.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tracegle">Tracegle</h2><h2 id="迹线-记录时间的痕迹-👌">迹线，记录时间的痕迹。👌</h2><hr><h3 id="hexo">Hexo</h3><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><p><code>正如上段所译，本博客采用的是hexo作为框架建设的。Hexo 是一个快速、简洁且高效的博客框架，使用MarkDown进行编辑文章，并可以生产静态网页。</code></p><h3 id="为什么要建站">为什么要建站</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">嘿嘿，其实建一个站是我很久之前就想做的。以前有玩过WordPress和emlog,用虚拟主机搭了一两个月，发布一些资源，后面也都不了了之运营不下去了。WordPress和emlog，typecheo扩展性比较强，都是有后端动态发布的框架；运营修改和SEO都比较友好。但对于我做个人博客偶尔能写写文章，虽然不是技术宅，也谈不上写文章。就是记录记录时间吧，这也是我的博客名叫Tracegle(迹线)的原因；hexo就是为写文章生的框架；功能简单纯粹。我认为很适合我。</span><br></pre></td></tr></table></figure><blockquote><p>​瞎扯了那么多，其实还是因为Hexo是本地部署生成的，配合Github Page服务就是免费呀。嘻嘻，用其他的运营得要服务器还得备案啥的都没接触过，其实有利有弊啦，暂时实力也不允许。🐶</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/02/16/5c6812aebf7b3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这是本Blog第一篇文章！希望以后能越来越好。😄😄😄</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2019/03/19/5c90c7750d546.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tracegle&quot;&gt;Tracegle&lt;/h2&gt;
&lt;h2 id=&quot;迹线-记录时间的痕迹-👌&quot;&gt;迹线，记录时间的痕迹。👌&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&quot;hexo&quot;&gt;Hexo&lt;/h3&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.i
      
    
    </summary>
    
      <category term="非正常的文章" scheme="http://yoursite.com/categories/%E9%9D%9E%E6%AD%A3%E5%B8%B8%E7%9A%84%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="hello world" scheme="http://yoursite.com/tags/hello-world/"/>
    
  </entry>
  
</feed>
